parameters:
  minrust: 1.32.0 # Rust 2018 with uniform paths
  setup: []
  services: {}
  env: {}
  cross: true
  dir: "."
  check_all_features: true
  check_no_features: true

jobs:
  - job: style
    displayName: Style linting
    strategy:
      matrix:
        stable:
          rust: stable
        beta:
          rust: beta
    pool:
      vmImage: ubuntu-18.04
    continueOnError: true
    steps:
      - template: install-rust.yml@templates
        parameters:
          rust: $(rust)
          components:
            - rustfmt
            - clippy
      # Run any user-specific setup steps
      - ${{ parameters.setup }}
      - script: cargo fmt --all -- --check
        workingDirectory: ${{ parameters.dir }}
        displayName: cargo fmt --check
      - script: cargo clippy --all
        workingDirectory: ${{ parameters.dir }}
        displayName: cargo clippy -- -D warnings
  - job: main
    displayName: Compile and test
    dependsOn: []
    ${{ if eq('true', parameters.cross) }}:
      strategy:
        matrix:
          "Linux (nightly)":
            vmImage: ubuntu-18.04
            rust: nightly
          "Linux (beta)":
            vmImage: ubuntu-18.04
            rust: beta
          Linux:
            vmImage: ubuntu-18.04
            rust: stable
          MacOS:
            vmImage: macOS-10.15
            rust: stable
          Windows:
            vmImage: windows-2019
            rust: stable
    ${{ if ne('true', parameters.cross) }}:
      strategy:
        matrix:
          "Linux (nightly)":
            vmImage: ubuntu-18.04
            rust: nightly
          "Linux (beta)":
            vmImage: ubuntu-18.04
            rust: beta
          Linux:
            vmImage: ubuntu-18.04
            rust: stable
    pool:
      vmImage: $(vmImage)
    services:
      ${{ insert }}: ${{ parameters.services }}
    continueOnError: $[eq(variables.rust, 'nightly')]
    steps:
      - task: Bash@3
        displayName: "Set Up Build Variables"
        inputs:
          targetType: inline
          script: |
            gitCurrentTag=$(git tag --points-at HEAD --sort -version:refname | head -1)
            gitShortHash=$(git describe --long --always --dirty)
            gitVersion=`if [[ -z $gitCurrentTag ]]; then echo $gitShortHash; else echo $gitCurrentTag; fi;`
            echo "##vso[task.setvariable variable=gitCurrentTag]$gitCurrentTag"
            echo "##vso[task.setvariable variable=gitVersion]$gitVersion"
            echo "##vso[task.setvariable variable=cliBuildName]intiface-cli-rs-${{ Agent.OS }}_${{ Agent.OSArchitecture }}-$gitVersion"
            echo "Git Current Tag: $gitCurrentTag"
            echo "Git Short Hash: $gitShortHash"
            echo "Git Version for Build: $gitVersion"
            echo "CLI Name: intiface-cli-node-${{ Agent.OS }}_${{ Agent.OSArchitecture }}-$gitVersion"
      - template: install-rust.yml@templates
        parameters:
          rust: $(rust)
      # Run any user-specific setup steps
      - ${{ parameters.setup }}
      - script: cargo check
        workingDirectory: ${{ parameters.dir }}
        displayName: cargo check
      - script: cargo check --no-default-features
        workingDirectory: ${{ parameters.dir }}
        displayName: cargo check --no-default-features
      - script: cargo check --all-features
        workingDirectory: ${{ parameters.dir }}
        displayName: cargo check --all-features
      - script: cargo test --all-features
        workingDirectory: ${{ parameters.dir }}
        displayName: cargo test
        env:
          ${{ insert }}: ${{ parameters.env }}
      - script: cargo doc --no-deps
        workingDirectory: ${{ parameters.dir }}
        displayName: cargo doc
      - task: CopyFiles@2
        displayName: "Copy frozen executables to staging"
        inputs:
          sourceFolder: "$(System.DefaultWorkingDirectory)/target/release"
          contents: |
            intiface-cli
            intiface-cli.exe
          targetFolder: '$(Build.ArtifactStagingDirectory)'
          flattenFolders: true
      - task: ArchiveFiles@2
        inputs:
          rootFolderOrFile: "$(Build.ArtifactStagingDirectory)"
          archiveFile: '$(Build.ArtifactStagingDirectory)/$(cliBuildName).zip'
          includeRootFolder: false
          archiveType: 'zip'
      - task: PublishPipelineArtifact@0
        displayName: "Publish frozen executables to artifacts"
        inputs:
          targetPath: '$(Build.ArtifactStagingDirectory)'
          artifactName: '$(cliBuildName)'        
  - ${{ if ne('false', parameters.minrust) }}:
    - job: msrv
      displayName: "${{ format('Minimum supported Rust version: {0}', parameters.minrust) }}"
      dependsOn: []
      # This represents the minimum Rust version supported.
      # Tests are not run as tests may require newer versions of rust.
      pool:
        vmImage: ubuntu-18.04
      steps:
        - template: install-rust.yml@templates
          parameters:
            rust: ${{ parameters.minrust }}
        # Run any user-specific setup steps
        - ${{ parameters.setup }}
        - script: cargo check
          workingDirectory: ${{ parameters.dir }}
          displayName: cargo check
        - script: cargo check --no-default-features
          workingDirectory: ${{ parameters.dir }}
          displayName: cargo check --no-default-features
        - script: cargo check --all-features
          workingDirectory: ${{ parameters.dir }}
          displayName: cargo check --all-features
  - ${{ if ne('', parameters.codecov_token) }}:
    - template: coverage.yml@templates
      parameters:
        token: ${{ parameters.codecov_token }}
        setup: ${{ parameters.setup }}
        services: ${{ parameters.services }}
        env: ${{ parameters.env }}
        dir: ${{ parameters.dir }}

 
